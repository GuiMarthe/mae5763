x = 'Idade média no grupo de faixa etária',
y = 'Prop (hd = 1)') +
theme_minimal()
md <- glm(hd ~ idade, data = heart, family = binomial(link = 'logit'))
modelsummary(list('Modelo proposto' = md),
stars=T,
output = 'kableExtra',
exponentiate=TRUE,
notes = c('Nota: Coeficientes exponenciados')
) %>%
kable_styling(latex_options = "HOLD_position")
heart %>% count(fe, hd)  %>%
mutate(hd = if_else(hd == 1, 'presente', 'ausente')) %>%
spread(hd, n) %>%
mutate(total = ausente + presente) %>%
mutate(ausente = glue::glue('{t}  ({prop})', t = ausente, prop = scales::percent(ausente/total, accuracy = 2))) %>%
mutate(presente = glue::glue('{t}  ({prop})', t = presente, prop = scales::percent(presente/total, accuracy = 2))) %>%
rename(`faixa etária` = fe, `hd = 0` = ausente, `hd = 1` = presente) %>%
kbl(booktabs = T,
format = 'latex',
align = 'c',
centering = T,
caption = 'Tabela de contingência para faixa etária e diagnóstico de doença arterial coronariana'
) %>%
kable_styling(full_width = F,
position = 'center', latex_options = "HOLD_position")
heart = read.table('heart.txt', header=TRUE) %>% clean_names() %>% rename(idade = age)
head(heart, 5) %>%
kbl(booktabs = T,
format = 'latex',
align = 'c',
centering = T
) %>%
kable_styling(full_width = F,
position = 'center', latex_options = "HOLD_position")
heart %>% count(fe, hd)  %>%
mutate(hd = if_else(hd == 1, 'presente', 'ausente')) %>%
spread(hd, n) %>%
mutate(total = ausente + presente) %>%
mutate(ausente = glue::glue('{t}  ({prop})', t = ausente, prop = scales::percent(ausente/total, accuracy = 2))) %>%
mutate(presente = glue::glue('{t}  ({prop})', t = presente, prop = scales::percent(presente/total, accuracy = 2))) %>%
rename(`faixa etária` = fe, `hd = 0` = ausente, `hd = 1` = presente) %>%
kbl(booktabs = T,
format = 'latex',
align = 'c',
centering = T,
caption = 'Tabela de contingência para faixa etária e diagnóstico de doença arterial coronariana'
) %>%
kable_styling(full_width = F,
position = 'center', latex_options = "HOLD_position")
fit.mode <- md
source('envel_gamma.R')
fit.model <- md
source('envel_gamma.R')
tiltle <- 'Gráfico de envelope para os resíduos do ajuste'
source('envel_gamma.R')
fit.model <- md
tiltle <- 'Gráfico de envelope para os resíduos do ajuste'
source('envel_gamma.R')
fit.model <- md
title <- 'Gráfico de envelope para os resíduos do ajuste'
source('envel_gamma.R')
fit.model <- md
title <- 'Gráfico de envelope para os resíduos do ajuste'
source('envel_gamma.R')
fit.model <- md
title <- 'Gráfico de envelope para os resíduos do ajuste'
source('envel_gamma.R')
fit.model <- md
title <- 'Gráfico de envelope para os resíduos do ajuste'
source('envel_gamma.R')
fit.model <- md
title <- 'Gráfico de envelope para os resíduos do ajuste'
source('envel_gamma.R')
fit.model <- md
title <- 'Gráfico de envelope para os\nresíduos do ajuste'
source('envel_gamma.R')
fit.model <- md
title <- 'Gráfico de envelope para os resíduos do ajuste'
source('envel_gamma.R')
source('diag_cook_bino.R')
title = 'Distância de Cook para o modelo ajustado'
source('diag_cook_bino.R')
d
di
heart[di > mean(di) + 4*sd(di)]
heart[di > mean(di) + 4*sd(di),]
md_all_samples <- glm(hd ~ idade, data = heart, family = binomial(link = 'logit'))
md_drop <- glm(hd ~ idade, data = heart[di < mean(di) + 4*sd(di),], family = binomial(link = 'logit'))
modelsummary(list('todas as observações' = md_all_samples, '-[5, 97]' = md_drop),
stars=T,
output = 'kableExtra',
exponentiate=TRUE,
notes = c('Nota: Coeficientes exponenciados')
) %>%
kable_styling(latex_options = "HOLD_position")
modelsummary(list('todas as observações' = md_all_samples, '-=excl. [5, 97]' = md_drop),
stars=T,
output = 'kableExtra',
exponentiate=TRUE,
notes = c('Nota: Coeficientes exponenciados')
) %>%
kable_styling(latex_options = "HOLD_position")
modelsummary(list('todas as observações' = md_all_samples, 'excl. [5, 97]' = md_drop),
stars=T,
output = 'kableExtra',
exponentiate=TRUE,
notes = c('Nota: Coeficientes exponenciados')
) %>%
kable_styling(latex_options = "HOLD_position")
X=model.matrix(md)
w = md$weight
W = diag(w)
A = t(X)%*%W%*%X
A = solve(A)
heart %>% head
ra
heart
heart$idade
range(heart$idade)
z=seq(20, 70, 5)
vz = cbind(1,z)
c = 6
erro = vz%*%A%*%t(vz)
erro = diag(erro)
erro =sqrt(c*erro)
etaz = -39.57 + 22.04*z
eta1 = etaz + erro
eta2 = etaz - erro
freqz= 1 - exp(-exp(etaz))
freq1= 1 - exp(-exp(eta1))
freq2= 1 - exp(-exp(eta2))
plot(z, freqz, type="n", ylim=c(0,1), xlab="Log Dose", ylab="Probabilidade Ajustada",
cex=2, cex.axis=1.3, cex.lab=1.3)
lines(z, freqz, lty=2,lwd=2)
plot(z, freqz, type="n", ylim=c(0,1), xlab="Log Dose", ylab="Probabilidade Ajustada",
cex=2, cex.axis=1.3, cex.lab=1.3)
lines(z, freqz, lty=2,lwd=2)
lines(z, freq1,lwd=2)
lines(z, freq2,lwd=2)
md
X=model.matrix(md)
w = md$weight
W = diag(w)
A = t(X)%*%W%*%X
A = solve(A)
z=seq(20, 70, 5)
vz = cbind(1,z)
c = 6
erro = vz%*%A%*%t(vz)
erro = diag(erro)
erro =sqrt(c*erro)
etaz = -5.3095 + 0.1109*z
eta1 = etaz + erro
eta2 = etaz - erro
freqz= 1 - exp(-exp(etaz))
freq1= 1 - exp(-exp(eta1))
freq2= 1 - exp(-exp(eta2))
plot(z, freqz, type="n", ylim=c(0,1), xlab="Log Dose", ylab="Probabilidade Ajustada",
cex=2, cex.axis=1.3, cex.lab=1.3)
lines(z, freqz, lty=2,lwd=2)
lines(z, freq1,lwd=2)
lines(z, freq2,lwd=2)
plot(z, freqz, type="n", ylim=c(0,1), xlab="idade", ylab="Probabilidade Ajustada",
cex=2, cex.axis=1.3, cex.lab=1.3)
lines(z, freqz, lty=2,lwd=2)
lines(z, freq1,lwd=2)
lines(z, freq2,lwd=2)
etaz = predict(md, z)
etaz = predict(md, data.frame(idade = z))
eta1 = etaz + erro
eta2 = etaz - erro
freqz= 1 - exp(-exp(etaz))
freq1= 1 - exp(-exp(eta1))
freq2= 1 - exp(-exp(eta2))
plot(z, freqz, type="n", ylim=c(0,1), xlab="idade", ylab="Probabilidade Ajustada",
cex=2, cex.axis=1.3, cex.lab=1.3)
lines(z, freqz, lty=2,lwd=2)
lines(z, freq1,lwd=2)
lines(z, freq2,lwd=2)
X=model.matrix(md)
w = md$weight
W = diag(w)
A = t(X)%*%W%*%X
A = solve(A)
z=seq(20, 70, 5)
vz = cbind(1,z)
c = 1
erro = vz%*%A%*%t(vz)
erro = diag(erro)
erro =sqrt(c*erro)
etaz = predict(md, data.frame(idade = z))
eta1 = etaz + erro
eta2 = etaz - erro
freqz= 1 - exp(-exp(etaz))
freq1= 1 - exp(-exp(eta1))
freq2= 1 - exp(-exp(eta2))
plot(z, freqz, type="n", ylim=c(0,1), xlab="idade", ylab="Probabilidade Ajustada",
cex=2, cex.axis=1.3, cex.lab=1.3)
lines(z, freqz, lty=2,lwd=2)
lines(z, freq1,lwd=2)
lines(z, freq2,lwd=2)
sqrt(6)
X=model.matrix(md)
w = md$weight
W = diag(w)
A = t(X)%*%W%*%X
A = solve(A)
z=seq(20, 70, 5)
vz = cbind(1,z)
erro = vz%*%A%*%t(vz)
erro = diag(erro)
erro = 1.96*sqrt(erro)
etaz = predict(md, data.frame(idade = z))
eta1 = etaz + erro
eta2 = etaz - erro
freqz= 1 - exp(-exp(etaz))
freq1= 1 - exp(-exp(eta1))
freq2= 1 - exp(-exp(eta2))
plot(z, freqz, type="n", ylim=c(0,1), xlab="idade", ylab="Probabilidade Ajustada",
cex=2, cex.axis=1.3, cex.lab=1.3)
lines(z, freqz, lty=2,lwd=2)
lines(z, freq1,lwd=2)
lines(z, freq2,lwd=2)
X=model.matrix(md)
w = md$weight
W = diag(w)
A = t(X)%*%W%*%X
A = solve(A)
z=seq(20, 70, 5)
vz = cbind(1,z)
erro = vz%*%A%*%t(vz)
erro = diag(erro)
erro = 1.96*sqrt(erro)
etaz = predict(md, data.frame(idade = z))
eta1 = etaz + erro
eta2 = etaz - erro
freqz= 1 - exp(-exp(etaz))
freq1= 1 - exp(-exp(eta1))
freq2= 1 - exp(-exp(eta2))
plot(z, freqz, type="n", ylim=c(0,1), xlab="idade", ylab="Probabilidade Ajustada", main='Banda de confiança para idade'
cex=2, cex.axis=1.3, cex.lab=1.3)
X=model.matrix(md)
w = md$weight
W = diag(w)
A = t(X)%*%W%*%X
A = solve(A)
z=seq(20, 70, 5)
vz = cbind(1,z)
erro = vz%*%A%*%t(vz)
erro = diag(erro)
erro = 1.96*sqrt(erro)
etaz = predict(md, data.frame(idade = z))
eta1 = etaz + erro
eta2 = etaz - erro
freqz= 1 - exp(-exp(etaz))
freq1= 1 - exp(-exp(eta1))
freq2= 1 - exp(-exp(eta2))
plot(z, freqz, type="n", ylim=c(0,1), xlab="idade", ylab="Probabilidade Ajustada", main='Banda de confiança para idade',
cex=2, cex.axis=1.3, cex.lab=1.3)
lines(z, freqz, lty=2,lwd=2)
lines(z, freq1,lwd=2)
lines(z, freq2,lwd=2)
coef(md)
coef(md)
exp(coef(md))
exp(coef(md))[1]
exp(coef(md))[2]
modelsummary(list('todas as observações' = md_all_samples, 'excl. [5, 97]' = md_drop),
stars=T,
output = 'kableExtra',
exponentiate=TRUE,
notes = c('Nota: Coeficientes exponenciados')
) %>%
kable_styling(latex_options = "HOLD_position")
modelsummary(list('todas as observações' = md_all_samples),
stars=T, exponentiate=T,
output = 'kableExtra',
exponentiate=TRUE,
notes = c('Nota: Coeficientes exponenciados')
) %>%
kable_styling(latex_options = "HOLD_position")
coef(md))
coef(md)
coef(md, complete = T)
coef(md)
stderr(md)
sqrt(diag(vcov(glm.D93)))
sqrt(diag(vcov(md)))
summary(md)
sqrt(diag(vcov(md)))
summary(md)
se <- sqrt(diag(vcov(md)))
coef(md)
coef(md) + 1.96*se
data.frame(coef(md) )
data.frame(coef = coef(md), se = se )
data.frame(coef = coef(md), ep = se, inferior= coef(md) - 1.96*se, superior = coef(md) + 1.96*se)
X=model.matrix(md)
w = md$weight
W = diag(w)
A = t(X)%*%W%*%X
A = solve(A)
z=seq(20, 70, 5)
vz = cbind(1,z)
erro = vz%*%A%*%t(vz)
erro = diag(erro)
erro = 1.96*sqrt(erro)
etaz = predict(md, data.frame(idade = z))
eta1 = etaz + erro
eta2 = etaz - erro
freqz= 1 - exp(-exp(etaz))
freq1= 1 - exp(-exp(eta1))
freq2= 1 - exp(-exp(eta2))
plot(z, freqz, type="n", ylim=c(0,1), xlab="idade", ylab="Probabilidade Ajustada", main='Banda de confiança para idade',
cex=2, cex.axis=1.3, cex.lab=1.3)
lines(z, freqz, lty=2,lwd=2)
lines(z, freq1,lwd=2)
lines(z, freq2,lwd=2)
require(ROCR)
require(pOCR)
require(pRCR)
require(pROC)
library(pROC)
install.packages("ROCR")
library(ROCR)
pred = prediction(fitted(md), heart$hd)
perf = performance(pred, "tpr", "fpr")
pred = prediction(fitted(md), heart$hd)
perf = performance(pred, "tpr", "fpr")
plot(perf)
abline(0,1,lty=2)
plot(perf,print.cutoffs.at=c(0.40,0.45,0.50))
abline(0,1,lty=2)
perf
str(perf)
perf@x.values
x <- perf@x.values
y <- perf@y.values
sqrt((x - 0)^2 + (y - 1)^2)
(x - 0)^2 + (y - 1)^2
(x - 0)^2 + (y - 1)^2
(1x0)^2 + (y - 1)^2
(-x)^2 + (y - 1)^2
x
x <- perf@x.values[[1]]
x
y <- perf@y.values[[1]]
x^2
x^2 + (y -1)^2
sqrt(x^2 + (y -1)^2)
dist <- sqrt(x^2 + (y -1)^2)
dist
min(dist)
min(dist) == dist
perf@alpha.name[[1]][min(dist) == dist]
which_min = min(dist) == dist
perf@alpha.name[[1]]
perf@alpha.values[[1]]
perf@alpha.values[[1]][min(dist) == dist]
plot(perf,print.cutoffs.at=c(0.39, 0.40,0.45,0.50))
which_max = max(dist) == dist
perf@alpha.values[[1]][which_max]
plot(perf,print.cutoffs.at=c(0.04347876, 0.39, 0.40,0.45,0.50))
dist <- sqrt((x - 0 )^2 + (y -1)^2)
which_min = min(dist) == dist
which_max = max(dist) == dist
perf@alpha.values[[1]][which_max]
dist <- sqrt((x - 1 )^2 + (y -1)^2)
which_min = min(dist) == dist
which_max = max(dist) == dist
perf@alpha.values[[1]][which_max]
dist <- sqrt((x - 0 )^2 + (y -1)^2)
dist <- sqrt((0 - x )^2 + (1 - y )^2)
which_min = min(dist) == dist
which_max = max(dist) == dist
perf@alpha.values[[1]][which_max]
perf@alpha.values[[1]][which_min]
plot(perf,print.cutoffs.at=c(0.39, 0.40,0.45,0.50))
plot(perf,print.cutoffs.at=c(0.39,0.45,0.50))
?performance
perf@alpha.values[[1]][which_min]
y <- perf@y.values[[1]]
pred = prediction(fitted(md), heart$hd)
perf = performance(pred, "tpr", "fpr")
x <- perf@x.values[[1]]
y <- perf@y.values[[1]]
dist <- sqrt((0 - x )^2 + (1 - y )^2)
which_min = min(dist) == dist
min_dist_point <- perf@alpha.values[[1]][which_min]
plot(perf)
abline(0,1,lty=2)
plot(perf,print.cutoffs.at=min_dist_point)
abline(0,1,lty=2)
pred = prediction(fitted(md), heart$hd)
perf = performance(pred, "tpr", "fpr")
x <- perf@x.values[[1]]
y <- perf@y.values[[1]]
dist <- sqrt((0 - x )^2 + (1 - y )^2)
which_min = min(dist) == dist
min_dist_point <- perf@alpha.values[[1]][which_min]
abline(0,1,lty=2)
pred = prediction(fitted(md), heart$hd)
perf = performance(pred, "tpr", "fpr")
x <- perf@x.values[[1]]
y <- perf@y.values[[1]]
dist <- sqrt((0 - x )^2 + (1 - y )^2)
which_min = min(dist) == dist
min_dist_point <- perf@alpha.values[[1]][which_min]
abline(0,1,lty=2)
pred = prediction(fitted(md), heart$hd)
perf = performance(pred, "tpr", "fpr")
x <- perf@x.values[[1]]
y <- perf@y.values[[1]]
dist <- sqrt((0 - x )^2 + (1 - y )^2)
which_min = min(dist) == dist
min_dist_point <- perf@alpha.values[[1]][which_min]
plot(perf)
abline(0,1,lty=2)
plot(perf,print.cutoffs.at=min_dist_point)
abline(0,1,lty=2)
pred = prediction(fitted(md), heart$hd)
perf = performance(pred, "tpr", "fpr")
x <- perf@x.values[[1]]
y <- perf@y.values[[1]]
dist <- sqrt((0 - x )^2 + (1 - y )^2)
which_min = min(dist) == dist
min_dist_point <- perf@alpha.values[[1]][which_min]
plot(perf, print.cutoffs.at=min_dist_point)
abline(0,1,lty=2)
abline(0,1,lty=2)
plot(perf, print.cutoffs.at=min_dist_cut, main='Curva ROC e o ponto de corte escolhido')
min_dist_cut <- perf@alpha.values[[1]][which_min]
plot(perf, print.cutoffs.at=min_dist_cut, main='Curva ROC e o ponto de corte escolhido')
heart
heart %>% mutate(pred = fitted(md))
heart %>% mutate(pred = fitted(md) > min_dist_cut)
heart %>% mutate(pred = fitted(md) > min_dist_cut) %>%
heart %>% mutate(pred = fitted(md) > min_dist_cut) %>%
count(hd, pred)
heart %>% mutate(pred = fitted(md) > min_dist_cut) %>%
count(hd, pred) %>%
spread(pred, n)
heart %>% mutate(pred = fitted(md) > if_else(min_dist_cut, 'prev. modelo = 1', 'prev. model = 0')) %>%
count(hd, pred) %>%
spread(pred, n)
heart %>% mutate(pred = if_else( fitted(md) > min_dist_cut, 'prev. modelo = 1', 'prev. model = 0')) %>%
count(hd, pred) %>%
spread(pred, n)
heart %>% mutate(pred = if_else( fitted(md) > min_dist_cut, 'prev. modelo = 1', 'prev. model = 0')) %>%
count(hd, pred) %>%
rename(`Doença cardíaca` = hd)
heart %>% mutate(pred = if_else( fitted(md) > min_dist_cut, 'prev. modelo = 1', 'prev. model = 0')) %>%
count(hd, pred) %>%
rename(`Doença cardíaca` = hd) %>%
spread(pred, n)
heart %>% mutate(pred = if_else( fitted(md) > min_dist_cut, 'prev. modelo = 1', 'prev. modelo = 0')) %>%
count(hd, pred) %>%
rename(`Doença cardíaca` = hd) %>%
spread(pred, n)
heart %>% mutate(pred = if_else( fitted(md) > min_dist_cut, 'prev. modelo = 1', 'prev. modelo = 0')) %>%
count(hd, pred) %>%
rename(`Doença cardíaca` = hd) %>%
spread(pred, n) %>%
janitor::adorn_totals()
heart %>% mutate(pred = if_else( fitted(md) > min_dist_cut, 'prev. modelo = 1', 'prev. modelo = 0')) %>%
count(hd, pred) %>%
rename(`Doença cardíaca` = hd) %>%
spread(pred, n) %>%
janitor::adorn_totals() %>% as.data.frame()
heart %>% mutate(pred = if_else( fitted(md) > min_dist_cut, 'prev. modelo = 1', 'prev. modelo = 0')) %>%
count(hd, pred) %>%
rename(`Doença cardíaca` = hd) %>%
spread(pred, n) %>%
janitor::adorn_totals(where = c('row', 'col')) %>% as.data.frame() %>%
kbl(booktabs = T, format = 'latex') %>%
kable_styling(full_width = F)
heart %>% mutate(pred = if_else( fitted(md) > min_dist_cut, 'prev. modelo = 1', 'prev. modelo = 0')) %>%
count(hd, pred) %>%
rename(`Doença cardíaca` = hd) %>%
spread(pred, n) %>%
janitor::adorn_totals(where = c('row', 'col')) %>% as.data.frame()
(41 + 42)/100
(32)/48
(41)/52
(32)/48
(41 + 42)/100
ajuste = gamlss(cbind(hd, 1-hd) ~ idade, family=BI, data = heart)
summary(ajuste)
modelsummary(list('todas as observações' = md_all_samples, 'excl. [5, 97]' = md_drop),
stars=T,
output = 'kableExtra',
exponentiate=F,
notes = c('Nota: Coeficientes exponenciados')
) %>%
kable_styling(latex_options = "HOLD_position")
data.frame(exp_coef = exp(coef(md)),
coef = coef(md),
ep = se,
inferior = coef(md) - 1.96*se,
superior = coef(md) + 1.96*se)
data.frame(
coef = coef(md),
ep = se,
inferior = coef(md) - 1.96*se,
superior = coef(md) + 1.96*se,
exp_coef = exp(coef(md)),
exp_inferior = exp(coef(md) - 1.96*se),
exp_superior = exp(coef(md) + 1.96*se)
)
plot(ajuste, summaries=F)
wp(ajuste)
